Given an =m x n= =board= of characters and a list of strings =words=, return /all words on the board/.

Each word must be constructed from letters of sequentially adjacent cells, where *adjacent cells* are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.



*Example 1:*

[[https://assets.leetcode.com/uploads/2020/11/07/search1.jpg]]

#+begin_example
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2020/11/07/search2.jpg]]

#+begin_example
Input: board = [["a","b"],["c","d"]], words = ["abcb"]
Output: []
#+end_example



*Constraints:*

- =m == board.length=
- =n == board[i].length=
- =1 <= m, n <= 12=
- =board[i][j]= is a lowercase English letter.
- =1 <= words.length <= 3 * 10=^{=4=}
- =1 <= words[i].length <= 10=
- =words[i]= consists of lowercase English letters.
- All the strings of =words= are unique.

  #+begin_src ruby
def find_words(board, words)
  result = []
  trie = Trie.new
  words.each { |word| trie.insert(word) }

  board.each_with_index do |row, i|
    row.each_with_index do |_, j|
      dfs(board, i, j, trie.root, "", result)
    end
  end

  result
end

def dfs(board, i, j, node, path, result)
  return if i < 0 || i >= board.length || j < 0 || j >= board[0].length || !node.children[board[i][j]]

  char = board[i][j]
  node = node.children[char]
  path += char

  if node.word_end
    result << path
    node.word_end = false
  end

  board[i][j] = "#"
  dfs(board, i - 1, j, node, path, result)
  dfs(board, i + 1, j, node, path, result)
  dfs(board, i, j - 1, node, path, result)
  dfs(board, i, j + 1, node, path, result)
  board[i][j] = char
end

class Trie
  attr_accessor :root

  def initialize
    @root = TrieNode.new
  end

  def insert(word)
    node = root
    word.each_char do |char|
      node.children[char] ||= TrieNode.new
      node = node.children[char]
    end
    node.word_end = true
  end
end

class TrieNode
  attr_accessor :children, :word_end

  def initialize
    @children = {}
    @word_end = false
  end
end

  #+end_src


#+begin_src cpp
#include <vector>
#include <string>
#include <unordered_set>

using namespace std;

class TrieNode {
public:
    TrieNode *children[26] = {nullptr};
    bool word_end = false;
};

class Trie {
public:
    TrieNode *root = new TrieNode();

    void insert(const string &word) {
        TrieNode *node = root;
        for (char c : word) {
            int idx = c - 'a';
            if (!node->children[idx]) {
                node->children[idx] = new TrieNode();
            }
            node = node->children[idx];
        }
        node->word_end = true;
    }
};

class Solution {
private:
    void dfs(vector<vector<char>>& board, int i, int j, TrieNode *node, string path, unordered_set<string> &result) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size()) {
            return;
        }
        char c = board[i][j];
        int idx = c - 'a';
        if (idx < 0 || idx >= 26 || !node->children[idx]) {
            return;
        }

        node = node->children[idx];
        path += c;

        if (node->word_end) {
            result.insert(path);
            node->word_end = false;
        }

        board[i][j] = '#';
        dfs(board, i - 1, j, node, path, result);
        dfs(board, i + 1, j, node, path, result);
        dfs(board, i, j - 1, node, path, result);
        dfs(board, i, j + 1, node, path, result);
        board[i][j] = c;
    }

public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Trie trie;
        for (const string &word : words) {
            trie.insert(word);
        }

        unordered_set<string> result_set;
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[0].size(); ++j) {
                dfs(board, i, j, trie.root, "", result_set);
            }
        }

        return vector<string>(result_set.begin(), result_set.end());
    }
};
#+end_src

--------------

https://leetcode.cn/problems/word-search-ii/description/?envType=study-plan-v2&envId=top-interview-150
