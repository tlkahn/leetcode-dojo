You are given an array of strings =tokens= that represents an arithmetic expression in a [[http://en.wikipedia.org/wiki/Reverse_Polish_notation][Reverse Polish Notation]].

Evaluate the expression. Return /an integer that represents the value of the expression/.

*Note* that:

- The valid operators are ='+'=, ='-'=, ='*'=, and ='/'=.
- Each operand may be an integer or another expression.
- The division between two integers always *truncates toward zero*.
- There will not be any division by zero.
- The input represents a valid arithmetic expression in a reverse polish notation.
- The answer and all the intermediate calculations can be represented in a *32-bit* integer.



*Example 1:*

#+begin_example
Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
#+end_example

*Example 2:*

#+begin_example
Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
#+end_example

*Example 3:*

#+begin_example
Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
#+end_example



*Constraints:*

- =1 <= tokens.length <= 10=^{=4=}
- =tokens[i]= is either an operator: ="+"=, ="-"=, ="*"=, or ="/"=, or an integer in the range =[-200, 200]=.

#+begin_src ruby
def evaluate_rpn(tokens)
  stack = []

  tokens.each do |token|
    case token
    when '+', '-', '*', '/'
      b = stack.pop
      a = stack.pop
      result = a.send(token, b)
      stack.push(token == '/' ? result.div : result)
    else
      stack.push(token.to_i)
    end
  end

  stack.pop
end
#+end_src

--------------

https://leetcode.cn/problems/evaluate-reverse-polish-notation/?envType=study-plan-v2&envId=top-interview-150
