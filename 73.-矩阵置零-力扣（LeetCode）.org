Given an =m x n= integer matrix =matrix=, if an element is =0=, set its entire row and column to =0='s.

You must do it [[https://en.wikipedia.org/wiki/In-place_algorithm][in place]].



*Example 1:*

[[https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg]]

#+begin_example
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg]]

#+begin_example
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
#+end_example



*Constraints:*

- =m == matrix.length=
- =n == matrix[0].length=
- =1 <= m, n <= 200=
- =-2=^{=31=}= <= matrix[i][j] <= 2=^{=31=}= - 1=

  #+begin_src ruby
def set_zeroes(matrix)
  rows, cols = matrix.size, matrix[0].size
  row_flag, col_flag = false, false

  (0...rows).each do |i|
    (0...cols).each do |j|
      if matrix[i][j] == 0
        matrix[i][0] = 0
        matrix[0][j] = 0
        row_flag = true if i == 0
        col_flag = true if j == 0
      end
    end
  end

  (1...rows).each { |i| (1...cols).each { |j| matrix[i][j] = 0 if matrix[i][0] == 0 || matrix[0][j] == 0 } }
  matrix[0].fill(0) if row_flag
  (0...rows).each { |i| matrix[i][0] = 0 } if col_flag

  matrix
end

  #+end_src



*Follow up:*

- A straightforward solution using =O(mn)= space is probably a bad idea.
- A simple improvement uses =O(m + n)= space, but still not the best solution.
- Could you devise a constant space solution?

--------------

https://leetcode.cn/problems/set-matrix-zeroes/?envType=study-plan-v2&envId=top-interview-150
