Given a string =s= representing a valid expression, implement a basic calculator to evaluate it, and return /the result of the evaluation/.

*Note:* You are *not* allowed to use any built-in function which evaluates strings as mathematical expressions, such as =eval()=.



*Example 1:*

#+begin_example
Input: s = "1 + 1"
Output: 2
#+end_example

*Example 2:*

#+begin_example
Input: s = " 2-1 + 2 "
Output: 3
#+end_example

*Example 3:*

#+begin_example
Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
#+end_example



*Constraints:*

- =1 <= s.length <= 3 * 10=^{=5=}
- =s= consists of digits, ='+'=, ='-'=, ='('=, =')'=, and =' '=.
- =s= represents a valid expression.
- ='+'= is *not* used as a unary operation (i.e., ="+1"= and ="+(2 + 3)"= is invalid).
- ='-'= could be used as a unary operation (i.e., ="-1"= and ="-(2 + 3)"= is valid).
- There will be no two consecutive operators in the input.
- Every number and running calculation will fit in a signed 32-bit integer.

  #+begin_src ruby
def evaluate(s)
  stack = []
  num = 0
  sign = 1
  result = 0

  s.each_char do |char|
    if char =~ /\d/
      num = num * 10 + char.to_i
    elsif char == '+'
      result += sign * num
      num = 0
      sign = 1
    elsif char == '-'
      result += sign * num
      num = 0
      sign = -1
    elsif char == '('
      stack.push(result)
      stack.push(sign)
      result = 0
      sign = 1
    elsif char == ')'
      result += sign * num
      num = 0
      result *= stack.pop
      result += stack.pop
    end
  end

  result += sign * num
  result
end

  #+end_src
--------------

https://leetcode.cn/problems/basic-calculator/description/?envType=study-plan-v2&envId=top-interview-150
