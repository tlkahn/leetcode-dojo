Given the =root= of a *complete* binary tree, return the number of the nodes in the tree.

According to *[[http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees][Wikipedia]]*, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between =1= and =2=^{=h=} nodes inclusive at the last level =h=.

Design an algorithm that runs in less than =O(n)= time complexity.



*Example 1:*

[[https://assets.leetcode.com/uploads/2021/01/14/complete.jpg]]

#+begin_example
Input: root = [1,2,3,4,5,6]
Output: 6
#+end_example

*Example 2:*

#+begin_example
Input: root = []
Output: 0
#+end_example

*Example 3:*

#+begin_example
Input: root = [1]
Output: 1
#+end_example



*Constraints:*

- The number of nodes in the tree is in the range =[0, 5 * 10=^{=4=}=]=.
- =0 <= Node.val <= 5 * 10=^{=4=}
- The tree is guaranteed to be *complete*.

#+begin_src ruby
def node_count(root)
  return 0 if root.nil?

  left_depth = get_depth(root.left)
  right_depth = get_depth(root.right)

  if left_depth == right_depth
    return 2 ** left_depth + node_count(root.right)
  else
    return 2 ** right_depth + node_count(root.left)
  end
end

def get_depth(node)
  depth = 0
  while node
    depth += 1
    node = node.left
  end
  depth
end

#+end_src

--------------

https://leetcode.cn/problems/count-complete-tree-nodes/description/?envType=study-plan-v2&envId=top-interview-150
