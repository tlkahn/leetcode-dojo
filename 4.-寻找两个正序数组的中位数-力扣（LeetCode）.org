* [[https://leetcode.cn/problems/median-of-two-sorted-arrays/][4. Median of Two Sorted Arrays]]

** Question

困难

[[/Users/toeinriver/Documents/org/web/WebImg/ce07858c-c522-49f9-a5d1-2da87f780f5d.svg]]

相关标签

[[/Users/toeinriver/Documents/org/web/WebImg/df84ef3f-36ad-4470-aa6b-e7251c8c3297.svg]]相关企业

[[/Users/toeinriver/Documents/org/web/WebImg/ebbc2bfc-9945-4690-8198-00c070a39f89.svg]]

Given two sorted arrays =nums1= and =nums2= of size =m= and =n= respectively, return *the median* of the two sorted arrays.

The overall run time complexity should be =O(log (m+n))=.

*Example 1:*

#+begin_example
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
#+end_example

*Example 2:*

#+begin_example
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
#+end_example



*Constraints:*

- =nums1.length == m=
- =nums2.length == n=
- =0 <= m <= 1000=
- =0 <= n <= 1000=
- =1 <= m + n <= 2000=
- =-10=^{=6=}= <= nums1[i], nums2[i] <= 10=^{=6=}

--------------

https://leetcode.cn/problems/median-of-two-sorted-arrays/description/

** Solution

#+begin_src ruby
def find_median_sorted_arrays(nums1, nums2)
  m, n = nums1.size, nums2.size
  return find_median_sorted_arrays(nums2, nums1) if m > n

  imin, imax = 0, m

  while imin <= imax
    i = (imin + imax) / 2
    j = (m + n + 1) / 2 - i

    left_max_A = i == 0 ? -Float::INFINITY : nums1[i - 1]
    left_max_B = j == 0 ? -Float::INFINITY : nums2[j - 1]
    right_min_A = i == m ? Float::INFINITY : nums1[i]
    right_min_B = j == n ? Float::INFINITY : nums2[j]

    if left_max_A <= right_min_B && left_max_B <= right_min_A
      return (m + n).odd? ? [left_max_A, left_max_B].max : ([left_max_A, left_max_B].max + [right_min_A, right_min_B].min) / 2.0
    elsif left_max_A > right_min_B
      imax = i - 1
    else
      imin = i + 1
    end
  end
end

nums1 = [1, 2]
nums2 = [3, 4]
puts find_median_sorted_arrays(nums1, nums2) # Output: 2.5
#+end_src
