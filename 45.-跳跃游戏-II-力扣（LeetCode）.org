You are given a *0-indexed* array of integers =nums= of length =n=. You are initially positioned at =nums[0]=.

Each element =nums[i]= represents the maximum length of a forward jump from index =i=. In other words, if you are at =nums[i]=, you can jump to any =nums[i + j]= where:

- =0 <= j <= nums[i]= and
- =i + j < n=

Return /the minimum number of jumps to reach/ =nums[n - 1]=. The test cases are generated such that you can reach =nums[n - 1]=.



*Example 1:*

#+begin_example
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
#+end_example

*Example 2:*

#+begin_example
Input: nums = [2,3,0,1,4]
Output: 2
#+end_example



*Constraints:*

- =1 <= nums.length <= 10=^{=4=}
- =0 <= nums[i] <= 1000=
- It's guaranteed that you can reach =nums[n - 1]=.


#+begin_src ruby
def min_jumps(nums)
  jumps, current_max, next_max = 0, 0, 0

  nums.each_with_index do |num, i|
    break if current_max >= nums.length - 1
    next_max = [next_max, i + num].max
    if i == current_max
      jumps += 1
      current_max = next_max
    end
  end

  jumps
end

#+end_src
--------------

https://leetcode.cn/problems/jump-game-ii/?envType=study-plan-v2&envId=top-interview-150
