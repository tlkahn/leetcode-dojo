Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the [[https://en.wikipedia.org/wiki/Lowest_common_ancestor][definition of LCA on Wikipedia]]: "The lowest common ancestor is defined between two nodes =p= and =q= as the lowest node in =T= that has both =p= and =q= as descendants (where we allow *a node to be a descendant of itself*)."



*Example 1:*

[[https://assets.leetcode.com/uploads/2018/12/14/binarytree.png]]

#+begin_example
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2018/12/14/binarytree.png]]

#+begin_example
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
#+end_example

*Example 3:*

#+begin_example
Input: root = [1,2], p = 1, q = 2
Output: 1
#+end_example



*Constraints:*

- The number of nodes in the tree is in the range =[2, 10=^{=5=}=]=.
- =-10=^{=9=}= <= Node.val <= 10=^{=9=}
- All =Node.val= are *unique*.
- =p != q=
- =p= and =q= will exist in the tree.

--------------

#+begin_src ruby
class TreeNode
  attr_accessor :val, :left, :right
  def initialize(val = 0, left = nil, right = nil)
    @val = val
    @left = left
    @right = right
  end
end

def lowest_common_ancestor(root, p, q)
  return root if root.nil? || root == p || root == q
  left = lowest_common_ancestor(root.left, p, q)
  right = lowest_common_ancestor(root.right, p, q)
  left.nil? ? right : right.nil? ? left : root
end
#+end_src

https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/?envType=study-plan-v2&envId=top-interview-150
