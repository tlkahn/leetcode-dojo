Given the =root= of a binary tree, flatten the tree into a "linked list":

- The "linked list" should use the same =TreeNode= class where the =right= child pointer points to the next node in the list and the =left= child pointer is always =null=.
- The "linked list" should be in the same order as a [[https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR][*pre-order* *traversal*]] of the binary tree.



*Example 1:*

[[https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg]]

#+begin_example
Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]
#+end_example

*Example 2:*

#+begin_example
Input: root = []
Output: []
#+end_example

*Example 3:*

#+begin_example
Input: root = [0]
Output: [0]
#+end_example



*Constraints:*

- The number of nodes in the tree is in the range =[0, 2000]=.
- =-100 <= Node.val <= 100=

  #+begin_src ruby
class TreeNode
  attr_accessor :val, :left, :right
  def initialize(val = 0, left = nil, right = nil)
    @val = val
    @left = left
    @right = right
  end
end

def flatten(root)
  return if root.nil?
  flatten(root.left)
  flatten(root.right)
  temp_right = root.right
  root.right = root.left
  root.left = nil
  current = root
  current = current.right while current.right
  current.right = temp_right
end
  #+end_src



*Follow up:* Can you flatten the tree in-place (with =O(1)= extra space)?

--------------

https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/?envType=study-plan-v2&envId=top-interview-150
