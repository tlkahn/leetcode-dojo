There are a total of =numCourses= courses you have to take, labeled from =0= to =numCourses - 1=. You are given an array =prerequisites= where =prerequisites[i] = [a=_{=i=}=, b=_{=i=}=]= indicates that you *must* take course =b=_{=i=} first if you want to take course =a=_{=i=}.

- For example, the pair =[0, 1]=, indicates that to take course =0= you have to first take course =1=.

Return /the ordering of courses you should take to finish all courses/. If there are many valid answers, return *any* of them. If it is impossible to finish all courses, return *an empty array*.



*Example 1:*

#+begin_example
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
#+end_example

*Example 2:*

#+begin_example
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
#+end_example

*Example 3:*

#+begin_example
Input: numCourses = 1, prerequisites = []
Output: [0]
#+end_example



*Constraints:*

- =1 <= numCourses <= 2000=
- =0 <= prerequisites.length <= numCourses * (numCourses - 1)=
- =prerequisites[i].length == 2=
- =0 <= a=_{=i=}=, b=_{=i=}= < numCourses=
- =a=_{=i=}= != b=_{=i=}
- All the pairs =[a=_{=i=}=, b=_{=i=}=]= are *distinct*.

#+begin_src ruby
def find_order(num_courses, prerequisites)
  indegrees = Array.new(num_courses, 0)
  adjacency_list = Array.new(num_courses) { [] }

  prerequisites.each do |course, prereq|
    indegrees[course] += 1
    adjacency_list[prereq] << course
  end

  queue = []
  indegrees.each_with_index { |degree, i| queue << i if degree == 0 }
  result = []

  while !queue.empty?
    current = queue.shift
    result << current

    adjacency_list[current].each do |course|
      indegrees[course] -= 1
      queue << course if indegrees[course] == 0
    end
  end

  result.size == num_courses ? result : []
end

#+end_src

#+begin_src ruby
def find_order(num_courses, prerequisites)
  indegrees, adjacency_list = Array.new(num_courses, 0), Array.new(num_courses) { [] }
  prerequisites.each { |course, prereq| indegrees[course] += 1; adjacency_list[prereq] << course }
  queue, result = indegrees.each_with_index.select { |degree, _| degree.zero? }.map(&:last), []

  until queue.empty?
    current = queue.shift
    result << current
    adjacency_list[current].each { |course| queue << course if (indegrees[course] -= 1).zero? }
  end

  result.size == num_courses ? result : []
end

#+end_src
--------------

https://leetcode.cn/problems/course-schedule-ii/?envType=study-plan-v2&envId=top-interview-150
