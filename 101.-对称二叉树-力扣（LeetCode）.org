Given the =root= of a binary tree, /check whether it is a mirror of itself/ (i.e., symmetric around its center).



*Example 1:*

[[https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg]]

#+begin_example
Input: root = [1,2,2,3,4,4,3]
Output: true
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg]]

#+begin_example
Input: root = [1,2,2,null,3,null,3]
Output: false
#+end_example



*Constraints:*

- The number of nodes in the tree is in the range =[1, 1000]=.
- =-100 <= Node.val <= 100=

#+begin_src ruby
class TreeNode
  attr_accessor :val, :left, :right
  def initialize(val = 0, left = nil, right = nil)
    @val = val
    @left = left
    @right = right
  end
end

def is_symmetric(root)
  symmetric_helper(root, root)
end

def symmetric_helper(node1, node2)
  return true if node1.nil? && node2.nil?
  return false if node1.nil? || node2.nil?
  (node1.val == node2.val) && symmetric_helper(node1.left, node2.right) && symmetric_helper(node1.right, node2.left)
end
#+end_src

--------------

https://leetcode.cn/problems/symmetric-tree/?envType=study-plan-v2&envId=top-interview-150
