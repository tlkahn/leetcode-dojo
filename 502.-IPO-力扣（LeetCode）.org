Suppose LeetCode will start its *IPO* soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the *IPO*. Since it has limited resources, it can only finish at most =k= distinct projects before the *IPO*. Help LeetCode design the best way to maximize its total capital after finishing at most =k= distinct projects.

You are given =n= projects where the =i=^{=th=} project has a pure profit =profits[i]= and a minimum capital of =capital[i]= is needed to start it.

Initially, you have =w= capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

Pick a list of *at most* =k= distinct projects from given projects to *maximize your final capital*, and return /the final maximized capital/.

The answer is guaranteed to fit in a 32-bit signed integer.



*Example 1:*

#+begin_example
Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
Output: 4
Explanation: Since your initial capital is 0, you can only start the project indexed 0.
After finishing it you will obtain profit 1 and your capital becomes 1.
With capital 1, you can either start the project indexed 1 or the project indexed 2.
Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.
#+end_example

*Example 2:*

#+begin_example
Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]
Output: 6
#+end_example



*Constraints:*

- =1 <= k <= 10=^{=5=}
- =0 <= w <= 10=^{=9=}
- =n == profits.length=
- =n == capital.length=
- =1 <= n <= 10=^{=5=}
- =0 <= profits[i] <= 10=^{=4=}
- =0 <= capital[i] <= 10=^{=9=}

#+begin_src cpp
#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
    vector<pair<int, int>> projects;
    for (int i = 0; i < profits.size(); ++i) {
        projects.push_back(make_pair(capital[i], profits[i]));
    }

    sort(projects.begin(), projects.end());

    priority_queue<int> max_heap;
    int idx = 0;

    for (int i = 0; i < k; ++i) {
        while (idx < projects.size() && projects[idx].first <= w) {
            max_heap.push(projects[idx].second);
            idx++;
        }

        if (!max_heap.empty()) {
            w += max_heap.top();
            max_heap.pop();
        } else {
            break;
        }
    }

    return w;
}

int main() {
    int k = 2, w = 0;
    vector<int> profits = {1, 2, 3};
    vector<int> capital = {0, 1, 1};

    int result = findMaximizedCapital(k, w, profits, capital);
    cout << "Maximized capital: " << result << endl;
    return 0;
}
#+end_src

  #+begin_src ruby
def find_maximized_capital(k, w, profits, capital)
  projects = profits.zip(capital).sort_by(&:last)
  max_heap = []

  k.times do
    while !projects.empty? && projects.first.last <= w
      max_heap << -projects.shift.first
    end

    break if max_heap.empty?

    w -= max_heap.sort!.shift
  end

  w
end
  #+end_src

--------------

https://leetcode.cn/problems/ipo/?envType=study-plan-v2&envId=top-interview-150
