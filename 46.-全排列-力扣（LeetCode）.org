Given an array =nums= of distinct integers, return /all the possible permutations/. You can return the answer in *any order*.



*Example 1:*

#+begin_example
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
#+end_example

*Example 2:*

#+begin_example
Input: nums = [0,1]
Output: [[0,1],[1,0]]
#+end_example

*Example 3:*

#+begin_example
Input: nums = [1]
Output: [[1]]
#+end_example



*Constraints:*

- =1 <= nums.length <= 6=
- =-10 <= nums[i] <= 10=
- All the integers of =nums= are *unique*.

#+begin_src ruby
def permutations(nums)
  return [nums] if nums.length <= 1
  result = []

  nums.each_with_index do |num, index|
    remaining_nums = nums[0...index] + nums[index+1..-1]
    permutations(remaining_nums).each { |perm| result << [num] + perm }
  end

  result
end

#+end_src

--------------

https://leetcode.cn/problems/permutations/description/?envType=study-plan-v2&envId=top-interview-150
