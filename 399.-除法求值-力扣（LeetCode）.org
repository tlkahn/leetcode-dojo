You are given an array of variable pairs =equations= and an array of real numbers =values=, where =equations[i] = [A=_{=i=}=, B=_{=i=}=]= and =values[i]= represent the equation =A=_{=i=}= / B=_{=i=}= = values[i]=. Each =A=_{=i=} or =B=_{=i=} is a string that represents a single variable.

You are also given some =queries=, where =queries[j] = [C=_{=j=}=, D=_{=j=}=]= represents the =j=^{=th=} query where you must find the answer for =C=_{=j=}= / D=_{=j=}= = ?=.

Return /the answers to all queries/. If a single answer cannot be determined, return =-1.0=.

*Note:* The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

*Note: *The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.



*Example 1:*

#+begin_example
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation:
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0
#+end_example

*Example 2:*

#+begin_example
Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
#+end_example

*Example 3:*

#+begin_example
Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]
#+end_example



*Constraints:*

- =1 <= equations.length <= 20=
- =equations[i].length == 2=
- =1 <= A=_{=i=}=.length, B=_{=i=}=.length <= 5=
- =values.length == equations.length=
- =0.0 < values[i] <= 20.0=
- =1 <= queries.length <= 20=
- =queries[i].length == 2=
- =1 <= C=_{=j=}=.length, D=_{=j=}=.length <= 5=
- =A=_{=i=}=, B=_{=i=}=, C=_{=j=}=, D=_{=j=} consist of lower case English letters and digits.

  #+begin_src cpp
  double dfs(const string& node, const string& target, unordered_map<string, unordered_map<string, double>>& graph, unordered_set<string>& visited) {
      if (node == target) {
          if (graph.count(node)) {
              return 1.0;
          } else {
              return -1.0;
          }
      }
      if (!graph.count(node)) return -1.0;

      visited.insert(node);
      for (const auto& [neighbor, value] : graph[node]) {
          if (!visited.count(neighbor)) {
              double result = dfs(neighbor, target, graph, visited);
              if (result != -1.0) {
                  return value * result;
              }
          }
      }

      return -1.0;
  }

  vector<double> calc_equation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
      unordered_map<string, unordered_map<string, double>> graph;

      for (int i = 0; i < equations.size(); ++i) {
          const auto& a = equations[i][0];
          const auto& b = equations[i][1];
          graph[a][b] = values[i];
          graph[b][a] = 1.0 / values[i];
      }

      vector<double> result;
      for (const auto& query : queries) {
          const auto& c = query[0];
          const auto& d = query[1];
          unordered_set<string> visited;
          double answer = dfs(c, d, graph, visited);
          result.push_back(answer);
      }

      return result;
  }

  #+end_src

  #+begin_src ruby
def dfs(node, target, graph, visited)
  return 1.0 if node == target && graph.key?(node)
  return -1.0 unless graph.key?(node)

  visited.add(node)
  graph[node].each do |neighbor, value|
    next if visited.include?(neighbor)

    result = dfs(neighbor, target, graph, visited.dup)
    return value * result unless result == -1.0
  end

  -1.0
end

def calc_equation(equations, values, queries)
  graph = Hash.new { |h, k| h[k] = {} }

  equations.each_with_index do |(a, b), i|
    graph[a][b] = values[i]
    graph[b][a] = 1.0 / values[i]
  end

  queries.map do |c, d|
    answer = dfs(c, d, graph, Set.new)
    answer
  end
end

  #+end_src
--------------

https://leetcode.cn/problems/evaluate-division/description/?envType=study-plan-v2&envId=top-interview-150
