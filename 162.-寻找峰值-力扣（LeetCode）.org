A peak element is an element that is strictly greater than its neighbors.

Given a *0-indexed* integer array =nums=, find a peak element, and return its index. If the array contains multiple peaks, return the index to *any of the peaks*.

You may imagine that =nums[-1] = nums[n] = -âˆž=. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in =O(log n)= time.



*Example 1:*

#+begin_example
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
#+end_example

*Example 2:*

#+begin_example
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
#+end_example



*Constraints:*

- =1 <= nums.length <= 1000=
- =-2=^{=31=}= <= nums[i] <= 2=^{=31=}= - 1=
- =nums[i] != nums[i + 1]= for all valid =i=.

#+begin_src ruby
def find_peak_element(nums)
  low, high = 0, nums.length - 1
  while low < high
    mid = (low + high) / 2
    if nums[mid] < nums[mid + 1]
      low = mid + 1
    else
      high = mid
    end
  end
  low
end
#+end_src

--------------

https://leetcode.cn/problems/find-peak-element/?envType=study-plan-v2&envId=top-interview-150
