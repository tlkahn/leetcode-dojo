You are given two integer arrays =nums1= and =nums2= sorted in *non-decreasing order* and an integer =k=.

Define a pair =(u, v)= which consists of one element from the first array and one element from the second array.

Return /the/ =k= /pairs/ =(u=_{=1=}=, v=_{=1=}=), (u=_{=2=}=, v=_{=2=}=), ..., (u=_{=k=}=, v=_{=k=}=)= /with the smallest sums/.



*Example 1:*

#+begin_example
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
#+end_example

*Example 2:*

#+begin_example
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
#+end_example



*Constraints:*

- =1 <= nums1.length, nums2.length <= 10=^{=5=}
- =-10=^{=9=}= <= nums1[i], nums2[i] <= 10=^{=9=}
- =nums1= and =nums2= both are sorted in *non-decreasing order*.
- =1 <= k <= 10=^{=4=}
- =k <= nums1.length * nums2.length=

--------------

#+begin_src ruby
def k_smallest_pairs(nums1, nums2, k)
  pairs = nums1.product(nums2).sort_by { |u, v| u + v }
  pairs.first(k)
end
#+end_src

#+begin_src cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct Pair {
    int u, v, sum;
    bool operator<(const Pair& other) const {
        return sum > other.sum;
    }
};

vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
    priority_queue<Pair> min_heap;
    vector<vector<int>> result;

    for (int i = 0; i < nums1.size() && i < k; i++) {
        for (int j = 0; j < nums2.size() && j < k; j++) {
            min_heap.push({nums1[i], nums2[j], nums1[i] + nums2[j]});
        }
    }

    while (k-- > 0 && !min_heap.empty()) {
        Pair p = min_heap.top();
        min_heap.pop();
        result.push_back({p.u, p.v});
    }

    return result;
}
#+end_src

#+begin_src cpp
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct Pair {
    int u_idx, v_idx, sum;
    bool operator<(const Pair& other) const {
        return sum > other.sum;
    }
};

vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
    priority_queue<Pair> min_heap;
    vector<vector<int>> result;

    if (nums1.empty() || nums2.empty() || k <= 0) {
        return result;
    }

    for (int i = 0; i < nums1.size() && i < k; ++i) {
        min_heap.push({i, 0, nums1[i] + nums2[0]});
    }

    while (k-- > 0 && !min_heap.empty()) {
        Pair p = min_heap.top();
        min_heap.pop();
        result.push_back({nums1[p.u_idx], nums2[p.v_idx]});

        if (p.v_idx + 1 < nums2.size()) {
            min_heap.push({p.u_idx, p.v_idx + 1, nums1[p.u_idx] + nums2[p.v_idx + 1]});
        }
    }

    return result;
}
#+end_src

https://leetcode.cn/problems/find-k-pairs-with-smallest-sums/?envType=study-plan-v2&envId=top-interview-150
