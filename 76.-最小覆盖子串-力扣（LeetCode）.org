* [[https://leetcode.cn/problems/minimum-window-substring/][76. Minimum Window Substring]]

困难

[[/Users/toeinriver/Documents/org/web/WebImg/4d3a7e96-087b-457f-91e9-d82e1b0dc8d8.svg]]

相关标签

[[/Users/toeinriver/Documents/org/web/WebImg/bcd4fd96-ccd4-46b1-981f-f93828ade46f.svg]]相关企业

[[/Users/toeinriver/Documents/org/web/WebImg/d48170d7-d65e-458c-82a0-ed055efcba2c.svg]]

提示

[[/Users/toeinriver/Documents/org/web/WebImg/a5eb6c77-701a-42bf-973a-530417c1ca45.svg]]

Given two strings =s= and =t= of lengths =m= and =n= respectively, return /the *minimum window*/

*/substring/*

/of/ =s= /such that every character in/ =t= /(*including duplicates*) is included in the window/. If there is no such substring, return /the empty string/ =""=.

The testcases will be generated such that the answer is *unique*.



*Example 1:*

#+begin_example
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
#+end_example

*Example 2:*

#+begin_example
Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
#+end_example

*Example 3:*

#+begin_example
Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
#+end_example



*Constraints:*

- =m == s.length=
- =n == t.length=
- =1 <= m, n <= 10=^{=5=}
- =s= and =t= consist of uppercase and lowercase English letters.

#+begin_src ruby
def min_window(s, t)
  t_count = Hash.new(0)
  t.each_char { |c| t_count[c] += 1 }

  min_length = Float::INFINITY
  min_str = ""
  left, right, required = 0, 0, t.length

  while right < s.length
    if t_count[s[right]] > 0
      required -= 1
    end
    t_count[s[right]] -= 1
    right += 1

    while required == 0
      if right - left < min_length
        min_length = right - left
        min_str = s[left...right]
      end
      t_count[s[left]] += 1
      if t_count[s[left]] > 0
        required += 1
      end
      left += 1
    end
  end

  min_str
end

#+end_src

*Follow up:* Could you find an algorithm that runs in =O(m + n)= time?

--------------

https://leetcode.cn/problems/minimum-window-substring/?envType=study-plan-v2&envId=top-interview-150
