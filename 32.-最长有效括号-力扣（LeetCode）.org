* [[https://leetcode.cn/problems/longest-valid-parentheses/][32. Longest Valid Parentheses]]

困难

[[/Users/toeinriver/Documents/org/web/WebImg/fa2acf2b-e118-44fd-9803-d1850953d6c6.svg]]

相关标签

[[/Users/toeinriver/Documents/org/web/WebImg/b8718350-f6d3-457e-b60f-7179799224bb.svg]]相关企业

[[/Users/toeinriver/Documents/org/web/WebImg/4cbe6699-a95e-42a9-87de-982a36befdb0.svg]]

Given a string containing just the characters ='('= and =')'=, return /the length of the longest valid (well-formed) parentheses/

/substring/

*Example 1:*

#+begin_example
Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
#+end_example

*Example 2:*

#+begin_example
Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
#+end_example

*Example 3:*

#+begin_example
Input: s = ""
Output: 0
#+end_example



*Constraints:*

- =0 <= s.length <= 3 * 10=^{=4=}
- =s[i]= is ='('=, or =')'=.

--------------

https://leetcode.cn/problems/longest-valid-parentheses/description/

#+begin_src ruby
def longest_valid_parentheses(s)
  stack, max_length = [-1], 0

  s.chars.each_with_index do |char, i|
    if char == '('
      stack.push(i)
    else
      stack.pop
      if stack.empty?
        stack.push(i)
      else
        max_length = [max_length, i - stack[-1]].max
      end
    end
  end

  max_length
end

#+end_src

This Ruby solution works by using a stack data structure to keep track of the indices of unmatched opening parentheses '(' and maintaining a variable =max_length= to record the longest valid parentheses substring encountered so far.

1. Initialize the =stack= with -1 to handle edge cases and =max_length= to 0.
2. Iterate through the input string =s= with both the character and its index.
3. If the current character is an opening parenthesis '(', push its index onto the =stack=.
4. If the current character is a closing parenthesis ')', pop the top element from the =stack=. This can be either an unmatched opening parenthesis or a previous closing parenthesis.
   1. If the =stack= is empty after the pop operation, it means that we've encountered a valid substring, but it's not connected to a previous valid substring. Push the current index onto the =stack= to start counting the next valid substring.
   2. If the =stack= is not empty, calculate the length of the valid substring by taking the difference between the current index and the index at the top of the =stack=. Update =max_length= if the calculated length is greater.
5. After iterating through the entire string, return =max_length= as the length of the longest valid parentheses substring.
