Given the =head= of a linked list, rotate the list to the right by =k= places.



*Example 1:*

[[https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg]]

#+begin_example
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg]]

#+begin_example
Input: head = [0,1,2], k = 4
Output: [2,0,1]
#+end_example



*Constraints:*

- The number of nodes in the list is in the range =[0, 500]=.
- =-100 <= Node.val <= 100=
- =0 <= k <= 2 * 10=^{=9=}

#+begin_src ruby
class ListNode
  attr_accessor :val, :next
  def initialize(val = 0, _next = nil)
    @val = val
    @next = _next
  end
end

def rotate_right(head, k)
  return head if head.nil? || head.next.nil? || k.zero?

  length = 1
  tail = head
  while tail.next
    tail = tail.next
    length += 1
  end

  k %= length
  return head if k.zero?

  new_tail = head
  (length - k - 1).times { new_tail = new_tail.next }
  new_head = new_tail.next
  new_tail.next = nil
  tail.next = head

  new_head
end
#+end_src

--------------

https://leetcode.cn/problems/rotate-list/?envType=study-plan-v2&envId=top-interview-150
