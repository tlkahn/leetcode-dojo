Given a binary tree

#+begin_example
struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
#+end_example

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to =NULL=.

Initially, all next pointers are set to =NULL=.



*Example 1:*

[[https://assets.leetcode.com/uploads/2019/02/15/117_sample.png]]

#+begin_example
Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
#+end_example

*Example 2:*

#+begin_example
Input: root = []
Output: []
#+end_example



*Constraints:*

- The number of nodes in the tree is in the range =[0, 6000]=.
- =-100 <= Node.val <= 100=

 #+begin_src ruby
class Node
  attr_accessor :val, :left, :right, :next

  def initialize(val = 0, left = nil, right = nil, next = nil)
    @val = val
    @left = left
    @right = right
    @next = next
  end
end

def connect(root)
  return root if root.nil?

  queue = [root]

  while !queue.empty?
    level_size = queue.size

    (0...level_size).each do |i|
      current = queue.shift

      current.next = queue.first if i < level_size - 1
      queue.push(current.left) if current.left
      queue.push(current.right) if current.right
    end
  end

  root
end
 #+end_src

*Follow-up:*

- You may only use constant extra space.
- The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.

--------------

https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/description/?envType=study-plan-v2&envId=top-interview-150
