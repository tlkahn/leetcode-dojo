Given a =n * n= matrix =grid= of =0's= and =1's= only. We want to represent =grid= with a Quad-Tree.

Return /the root of the Quad-Tree representing/ =grid=.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:

- =val=: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the =val= to True or False when =isLeaf= is False, and both are accepted in the answer.
- =isLeaf=: True if the node is a leaf node on the tree or False if the node has four children.

#+begin_example
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}
#+end_example

We can construct a Quad-Tree from a two-dimensional area using the following steps:

1. If the current grid has the same value (i.e all =1's= or all =0's=) set =isLeaf= True and set =val= to the value of the grid and set the four children to Null and stop.
2. If the current grid has different values, set =isLeaf= to False and set =val= to any value and divide the current grid into four sub-grids as shown in the photo.
3. Recurse for each of the children with the proper sub-grid.

[[https://assets.leetcode.com/uploads/2020/02/11/new_top.png]]

If you want to know more about the Quad-Tree, you can refer to the [[https://en.wikipedia.org/wiki/Quadtree][wiki]].

*Quad-Tree format:*

You don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where =null= signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list =[isLeaf, val]=.

If the value of =isLeaf= or =val= is True we represent it as *1* in the list =[isLeaf, val]= and if the value of =isLeaf= or =val= is False we represent it as *0*.



*Example 1:*

[[https://assets.leetcode.com/uploads/2020/02/11/grid1.png]]

#+begin_example
Input: grid = [[0,1],[1,0]]
Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]
Explanation: The explanation of this example is shown below:
Notice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2020/02/12/e2mat.png]]

#+begin_example
Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]
Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.
The topLeft, bottomLeft and bottomRight each has the same value.
The topRight have different values so we divide it into 4 sub-grids where each has the same value.
Explanation is shown in the photo below:
#+end_example



*Constraints:*

- =n == grid.length == grid[i].length=
- =n == 2=^{=x=} where =0 <= x <= 6=

#+begin_src ruby
class Node
  attr_accessor :val, :isLeaf, :topLeft, :topRight, :bottomLeft, :bottomRight

  def initialize(val = false, isLeaf = false)
    @val = val
    @isLeaf = isLeaf
    @topLeft = @topRight = @bottomLeft = @bottomRight = nil
  end
end

def construct(grid)
  n = grid.length
  return Node.new(true, true) if n == 1 && grid[0][0] == 1
  return Node.new(false, true) if n == 1 && grid[0][0] == 0

  same = true
  val = grid[0][0]
  n.times do |i|
    n.times do |j|
      same = false if grid[i][j] != val
    end
  end

  if same
    return Node.new(val == 1, true)
  else
    half = n / 2
    topLeft = construct(grid[0...half].map { |row| row[0...half] })
    topRight = construct(grid[0...half].map { |row| row[half...n] })
    bottomLeft = construct(grid[half...n].map { |row| row[0...half] })
    bottomRight = construct(grid[half...n].map { |row| row[half...n] })

    node = Node.new(false, false)
    node.topLeft = topLeft
    node.topRight = topRight
    node.bottomLeft = bottomLeft
    node.bottomRight = bottomRight
    return node
  end
end
#+end_src

--------------

https://leetcode.cn/problems/construct-quad-tree/?envType=study-plan-v2&envId=top-interview-150
