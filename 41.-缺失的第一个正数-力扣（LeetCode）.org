Given an unsorted integer array =nums=. Return the /smallest positive integer/ that is /not present/ in =nums=.

You must implement an algorithm that runs in =O(n)= time and uses =O(1)= auxiliary space.



*Example 1:*

#+begin_example
Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
#+end_example

*Example 2:*

#+begin_example
Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
#+end_example

*Example 3:*

#+begin_example
Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
#+end_example



*Constraints:*

- =1 <= nums.length <= 10=^{=5=}
- =-2=^{=31=}= <= nums[i] <= 2=^{=31=}= - 1=

--------------
#+begin_src ruby
def smallest_positive(nums)
  size = nums.size
  (0...size).each do |i|
    while nums[i] > 0 && nums[i] <= size && nums[nums[i] - 1] != nums[i]
      nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
    end
  end

  (0...size).each do |i|
    return i + 1 if nums[i] != i + 1
  end

  size + 1
end

#+end_src
https://leetcode.cn/problems/first-missing-positive/description/
