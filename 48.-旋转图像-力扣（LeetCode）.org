You are given an =n x n= 2D =matrix= representing an image, rotate the image by *90* degrees (clockwise).

You have to rotate the image [[https://en.wikipedia.org/wiki/In-place_algorithm][*in-place*]], which means you have to modify the input 2D matrix directly. *DO NOT* allocate another 2D matrix and do the rotation.



*Example 1:*

[[https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg]]

#+begin_example
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
#+end_example

*Example 2:*

[[https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg]]

#+begin_example
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
#+end_example



*Constraints:*

- =n == matrix.length == matrix[i].length=
- =1 <= n <= 20=
- =-1000 <= matrix[i][j] <= 1000=

  #+begin_src ruby
def rotate(matrix)
  n = matrix.length
  (0...n/2).each do |layer|
    first, last = layer, n - 1 - layer
    (first...last).each do |i|
      offset = i - first
      temp = matrix[first][i]
      matrix[first][i] = matrix[last - offset][first]
      matrix[last - offset][first] = matrix[last][last - offset]
      matrix[last][last - offset] = matrix[i][last]
      matrix[i][last] = temp
    end
  end
end

  #+end_src

--------------

https://leetcode.cn/problems/rotate-image/description/?envType=study-plan-v2&envId=top-interview-150
